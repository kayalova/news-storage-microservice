-----
создавать новый трай кетч в случае когда требуется доп обработка ошибки. например в рпеозитории она нужна - как на самом нижнем уровне, обработать соответствующе,
возможно просто выбросить ошибку. в контроллере трай кетч нужен чтобы клиенту дополнить ошибку доп данными, например статусом или доп сообщением

доменные области - это бд сущности

29.09

----------- Это первая итерация -------------

1. Написать news репозиторий - create, get, update, delete +
2. Написать news service +
3. Написать эндпоинты(newsRouter) для сущности news - create, get, update, delete +
3.* переименовать news -> article

4. Написать users репозиторий - create +
5. Написать users сервис - createUser +
6. Написать эндпоинты userRouter'a - create +


check datagrip

---------- Это вторая итерация -------------
1. Добавить авторизацию - через куки и сессию +
2. Складывать сообщения в rabbit в newsService 
3. Добавить 2ой сервис (newsAnalytics), который будет принимать сообщения через rabbitmq
4. Добавить кликхаус в newsAnalytics

5. Добавить докер, поместить туда все сервисы

6. восхищаться

закончить до 15 

15 - 21 

1. добавить роут для создания сессии - 
сессия создается только для авторов - чтобы они могли создавать и апдейтить новости,
только тот у кого есть сессия может обновить и создать новость

Есть автор
Есть новость
Новость и автор связаны через поле автор в новости

идет запрос на создание сессии - от клиента передается имейл автора,
далее идет проверка что автор с таким имейлом существует,

сессия нужна чтобы автор мог создать новость и мог апдейтить свою(!) новость

/update  - есть ли сессия, 

/createUser - id:1 -> id -signup - в первый раз - > sessionID
/createSession - email, password -> sessionID - login/signin

/updateNews -> sessionID - id ->db 

redis
{
    sessionId1: userId1,
}








если на поиск/разбор темы уходит пол часа, откладываю ее 
если без детального разбора могу сделать - сделать

15 - 24 
// 

newsService(pg)   --rabbitmq-->  newsAnalytics (clickhouse)





----------------------------

сессия - живет на одной странице, 
куки - 


/ express.createSession - session

req.session = 

app.js - 2 
2 server'a 
--    --

может быть 2 соединения с редисом
redis.connect({port:123, host})

1 редис 2 соединения
лучше хранить сессию в редисе - так сессия будет синхронизирована между 2 инстансами

/login -> sessionId, client(cookies), server(redis)

app.js-1      app.js-2
/create      /create
/getSecret   /getSecret2 

без балансировщика они будут под разными хостами(доменами, айпишниками)
пользователь будет слать запрос либо на апп1, либо на апп2


node process - 2 домена, т.е 2 адреса

с балансировщиком
1. публично хост1, на который юзер шлет запрос
2. а приватные хосты = количество инстансов. каждый инстанс имеет свой единственный приватный хост

nginx  - шлет запрос по айпишнику под котором размещен апп.джс
proxy
есть сервер принимающий запросы

проксирующая прослойка как то обрабывает запросы перед обрабткой бэкенд сервера

мидлвары = прокси на уровне приложения




// 3520  - clickhouse password
// datagrip3520meow - datagrip pasword]

//